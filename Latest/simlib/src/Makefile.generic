#
#  Makefile for SIMLIB
#  ===================
#
#  Targets: generic UNIX/Linux/FreeBSD/GNU C++
#  Make:    gmake (GNU make)
#
################################################################################
# How to install pure SimLib:
# edit Makefile to suit it to your system
# type "make clean" to remove binaries created by compiler
# type "make" or "make all" to compile sources
# type "make install" to install library (WARNING: this experimental Makefile
#                     installs into parent directory .. )
# then you may type "make test" to check if all is OK
################################################################################
# How to install SimLib with Fuzzy module:
# type "make MODULES="fuzzy" clean" to remove binaries created by compiler
# type 'make MODULES="fuzzy"' to compile sources
# type 'make MODULES="fuzzy" install' to install library (WARNING: this
#          experimental Makefile installs into parent directory .. )
# then you may type "make MODULES="fuzzy" test" to check if all is OK
# type "make MODULES="fuzzy" pack" to create archive SIMLIB*.tar.gz
################################################################################
# How to install SimLib with XML analyzer module:
# First you must have library Xerces1.4 installed.
# You can find it on http://xml.apache.org/xerces-c/
#
# type "make MODULES="fuzzy analyzer" clean" to remove binaries created by compiler
# type 'make MODULES="fuzzy analyzer"' to compile sources
# type 'make MODULES="fuzzy analyzer" install' to install library (WARNING: this
#          experimental Makefile installs into parent directory .. )
# then you may type "make MODULES="fuzzy analyzer" test" to check if all is OK
# type "make MODULES="fuzzy analyzer" pack" to create archive SIMLIB*.tar.gz
#############################################################################
# If you have Doxygen installed on your system, you may type
# 'make doc'
# or
# 'make MODULES="fuzzy" doc'


#############################################################################
# Definitions

.PHONY: all install uninstall clean distclean test doc

# to avoid troubles
SHELL=/bin/sh

# to add modules
MODULES=

# the name of the library
LIBNAME=simlib

# directory where the files will be installed in
PREFIX ?= /usr/local

# program to remove files
RM = rm -f

# program providing a simple test of installed library functionality
TESTFILE=_test_

# headers for dependencies
HEADERS = simlib.h errors.h internal.h

# headers for install
SIMLIB_HEADERS = simlib.h \
                 delay.h zdelay.h \
                 simlib2D.h simlib3D.h \
                 optimize.h

#############################################################################
# binaries which will be in the library
#
OPTOBJFILES = opt-hooke.o opt-simann.o opt-param.o

BASEOBJFILES = atexit.o \
	calendar.o debug.o \
	entity.o error.o errors.o event.o \
	link.o list.o name.o \
	object.o \
	print.o run.o \
	sampler.o \
	$(OPTOBJFILES)

CONTIOBJFILES = delay.o zdelay.o simlib2D.o simlib3D.o\
	algloop.o cond.o \
	fun.o graph.o \
	intg.o continuous.o ni_abm4.o ni_euler.o \
	ni_fw.o ni_rke.o ni_rkf3.o ni_rkf5.o ni_rkf8.o numint.o \
	output1.o \
	stdblock.o

DISCOBJFILES = \
	barrier.o \
	facility.o \
	histo.o \
	output2.o process.o queue.o random1.o random2.o \
	semaphor.o stat.o store.o tstat.o waitunti.o

OBJFILES = $(BASEOBJFILES)  \
           $(CONTIOBJFILES) \
           $(DISCOBJFILES)

SIMLIBOBJFILES =  $(BASEOBJFILES)  \
           $(CONTIOBJFILES) \
           $(DISCOBJFILES)

#############################################################################
# Implicit Rule to compile modules
%.o : %.cc
	$(CXX) $(CXXFLAGS) -c $<

#############################################################################
###  Create library
#############################################################################
WITHMODULES=$(SIMLIBOBJFILES)
SIMLIB_DOC=simlibdoc
ifeq (fuzzy, $(findstring fuzzy, $(MODULES)))
FUZZYDIR=../fuzzy
OBJFILES += \
     $(FUZZYDIR)/fuzzy.o       \
     $(FUZZYDIR)/fuzzyio.o     \
     $(FUZZYDIR)/fuzzymf.o     \
     $(FUZZYDIR)/fuzzyrul.o    \
     $(FUZZYDIR)/ruletree.o    \
     $(FUZZYDIR)/rules.o
WITHMODULES+=fuzzymodule
SIMLIB_HEADERS+=$(FUZZYDIR)/fuzzy.h
SIMLIB_DOC+=fuzzydoc
endif

ifeq (analyzer, $(findstring analyzer, $(MODULES)))
OBJFILES+=$(FUZZYDIR)/analyzer/fuzzyanalyzer.o
WITHMODULES+=analyzermodule
SIMLIB_HEADERS+=$(FUZZYDIR)/analyzer/analyzer.h $(FUZZYDIR)/analyzer/fuzzyanalyzer.h
endif

# main rules
withmodules: $(WITHMODULES) all

all: $(LIBNAME).a  $(LIBNAME).so

special: $(LIBNAME)-c.a  $(LIBNAME)-c.so #$(LIBNAME)-d.a  $(LIBNAME)-d.so

fuzzymodule:
	$(MAKE) -C $(FUZZYDIR) CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)"

fuzzydoc:
	$(MAKE) -C $(FUZZYDIR) doc

analyzermodule:
	$(MAKE) -C $(FUZZYDIR)/analyzer

# rules for static library

$(LIBNAME).a: $(OBJFILES) version.o
	$(RM) $(LIBNAME).a  # create new library
	ar rcv $(LIBNAME).a $(OBJFILES) version.o
	ranlib $(LIBNAME).a
	nm --demangle $(LIBNAME).a > $(LIBNAME).nm

$(LIBNAME)-c.a: $(BASEOBJFILES) $(CONTIOBJFILES) version.o
	$(RM) $(LIBNAME)-c.a  # create new library
	ar rcv $(LIBNAME)-c.a $(BASEOBJFILES) $(CONTIOBJFILES) version.o
	ranlib $(LIBNAME)-c.a
	nm --demangle $(LIBNAME)-c.a > $(LIBNAME)-c.nm

$(LIBNAME)-d.a: $(BASEOBJFILES) $(DISCOBJFILES) version.o
	$(RM) $(LIBNAME)-d.a  # create new library
	ar rcv $(LIBNAME)-d.a $(BASEOBJFILES) $(DISCOBJFILES) version.o
	ranlib $(LIBNAME)-d.a
	nm --demangle $(LIBNAME)-d.a > $(LIBNAME)-d.nm

# rules for dynamic library

$(LIBNAME).so: $(OBJFILES) version.o
	$(CXX) -shared $(CXXFLAGS) version.o $(OBJFILES) -o $(LIBNAME).so

$(LIBNAME)-c.so: $(BASEOBJFILES) $(CONTIOBJFILES) version.o
	$(CXX) -shared $(CXXFLAGS) $(BASEOBJFILES) version.o $(CONTIOBJFILES) -o $(LIBNAME)-c.so

$(LIBNAME)-d.so: $(BASEOBJFILES) $(DISCOBJFILES) version.o
	$(CXX) -shared $(CXXFLAGS) $(BASEOBJFILES) version.o $(DISCOBJFILES) -o $(LIBNAME)-d.so

#############################################################################
# create error messages file  TODO: use gettext?

errors.h errors.cc: generr.c errors.txt
	$(CC) generr.c -o generr
	./generr errors.txt

#############################################################################
# library modules - dependencies
dep:
	$(CXX) -MM *.cc >dep

-include dep

#############################################################################
# always compiled last - contains time-stamp of library
version.o: version.cc $(OBJFILES)

#############################################################################
# usable for debuging only
asm: process.s
process.s: process.cc
	$(CXX) $(CXXFLAGS) -S -c process.cc

#############################################################################
# Remove garbage from directory
# files to remove after compiling & install
GARBAGE=$(OBJFILES) *.o *~ $(LIBNAME)*.a $(LIBNAME)*.nm $(LIBNAME)*.so \
	*.gcda *.gcno *.gcov generr $(TESTFILE) $(TESTFILE).output

clean:
	$(RM) $(GARBAGE)

#############################################################################
# Install library

#TODO: add version and symlink
install: all
	install -d $(PREFIX)/include $(PREFIX)/lib
	install -m0644 $(SIMLIB_HEADERS) $(PREFIX)/include
	install -m0644 $(LIBNAME).a      $(PREFIX)/lib/lib$(LIBNAME).a
	install -m0644 $(LIBNAME).so     $(PREFIX)/lib/lib$(LIBNAME).so
	@if ! grep '^'$(PREFIX)/lib'$$' /etc/ld.so.conf >/dev/null; then \
	  echo "Add $(PREFIX)/lib to /etc/ld.so.conf ";  \
	fi
	@echo "This should be run as root"
	ldconfig # update dynamic linker cache

#############################################################################
# Uninstall library

uninstall:
	$(RM) $(foreach headerfile, $(SIMLIB_HEADERS), $(PREFIX)/include/$(headerfile))
	$(RM) $(PREFIX)/lib/lib$(LIBNAME).a
	$(RM) $(PREFIX)/lib/lib$(LIBNAME).so
	@echo "This should be run as root"
	ldconfig # update dynamic linker cache

#############################################################################
# Basic test of functionality

test: all
	$(CXX) $(CXXFLAGS) -o $(TESTFILE) $(TESTFILE).cc -lm simlib.a
	./$(TESTFILE) >$(TESTFILE).output
	sed -i 's/0x[0-9a-f]*/PTR/g' $(TESTFILE).output
	@echo `date` "by" `$(CXX) --version|head -n 1` >>TEST-BY.txt
	@echo
	-diff -bs $(TESTFILE).output-- $(TESTFILE).output
	@echo
	@rm ./$(TESTFILE) ./$(TESTFILE).output

#############################################################################
VERSION: simlib.h
	grep '// SIMLIB version: ' simlib.h | tr -dc '0-9.' >VERSION

doc: $(SIMLIB_DOC)

simlibdoc:
	doxygen doxygen.config

# end of Makefile.Linux
