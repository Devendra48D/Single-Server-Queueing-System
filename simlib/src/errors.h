//
// errors.h
//
//
//
//
/* Generated from file 'errors.txt' by program GENERR */

enum _ErrEnum {
/* 0 */ Copyright,
/* 1 */ UnknownError,
/* 2 */ InternalError,
/* 3 */ MemoryError,
/* 4 */ InitError,
/* 5 */ TwiceInitError,
/* 6 */ InitInRunError,
/* 7 */ RunUseError,
/* 8 */ SetStepError,
/* 9 */ InitMinStepError,
/* 10 */ SetStepError2,
/* 11 */ SetAccuracyError,
/* 12 */ SFunctionUseError,
/* 13 */ AccuracyError,
/* 14 */ LinkRefError,
/* 15 */ LinkDelError,
/* 16 */ LinkOutError,
/* 17 */ DuplicateCalendar,
/* 18 */ DeletingActive,
/* 19 */ SchedulingBeforeTime,
/* 20 */ EmptyCalendar,
/* 21 */ ProcessNotInitialized,
/* 22 */ HistoStepError,
/* 23 */ HistoCountError,
/* 24 */ ListActivityError,
/* 25 */ ListEmptyError,
/* 26 */ QueueRefError,
/* 27 */ EmptyWUListError,
/* 28 */ EntityRefError,
/* 29 */ EntityIsNotScheduled,
/* 30 */ TStatNotInitialized,
/* 31 */ CantCreateIntg,
/* 32 */ CantDestroyIntg,
/* 33 */ CantCreateStatus,
/* 34 */ CantDestroyStatus,
/* 35 */ FacInterruptError,
/* 36 */ ReleaseError,
/* 37 */ ReleaseNotSeized,
/* 38 */ EnterCapError,
/* 39 */ LeaveManyError,
/* 40 */ SetCapacityError,
/* 41 */ SetQueueError,
/* 42 */ WeibullError,
/* 43 */ ErlangError,
/* 44 */ NegBinError,
/* 45 */ NegBinMError1,
/* 46 */ NegBinMError2,
/* 47 */ PoissonError,
/* 48 */ GeomError,
/* 49 */ HyperGeomError1,
/* 50 */ HyperGeomError2,
/* 51 */ OutFilePutError,
/* 52 */ OutFileOpenError,
/* 53 */ CantOpenOutFile,
/* 54 */ CantCloseOutFile,
/* 55 */ AlgLoopDetected,
/* 56 */ LowGreaterHigh,
/* 57 */ BadQntzrStep,
/* 58 */ InconsistentHeader,
/* 59 */ SemaphoreError,
/* 60 */ BadUniformParam,
/* 61 */ StatNoRecError,
/* 62 */ StatDispError,
/* 63 */ AL_BadBounds,
/* 64 */ AL_BadInitVal,
/* 65 */ AL_Diverg,
/* 66 */ AL_MaxCount,
/* 67 */ AL_NotInLoop,
/* 68 */ NI_UnknownMeth,
/* 69 */ NI_MultDefMeth,
/* 70 */ NI_IlStepSize,
/* 71 */ NI_NotSingleStep,
/* 72 */ NI_NotMultiStep,
/* 73 */ NI_CantSetMethod,
/* 74 */ NI_CantSetStarter,
/* 75 */ RlineErr1,
/* 76 */ RlineErr2,
/* 77 */ NoDebugErr,
/* 78 */ DelayTimeErr,
/* 79 */ ParameterChangeErr,
/* 80 */ UserError,
};

extern char *_ErrMsg(enum _ErrEnum N);

